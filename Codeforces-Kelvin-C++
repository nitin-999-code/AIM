int query(int a, int b) {
    std::cout << "? " << a << " " << b << std::endl;
    int ans;
    std::cin >> ans;
    return ans;
}
 
void solve() {
    int n;
    std::cin >> n;
    
    int k = (n + 1) / 3;
    std::cout << k << std::endl;
    
    std::vector<std::array<int, 3>> tp;
    std::vector<std::array<int, 2>> pr[2];
    std::queue<int> q;
    for (int i = 1; i <= n; i++) {
        q.push(i);
    }
    
    while (true) {
        if (!pr[0].empty() && !pr[1].empty()) {
            auto [a, b] = pr[0].back();
            auto [c, d] = pr[1].back();
            pr[0].pop_back();
            pr[1].pop_back();
            
            if (query(b, c)) {
                tp.push_back({a, b, c});
                q.push(d);
            } else {
                tp.push_back({b, c, d});
                q.push(a);
            }
        } else if (q.size() >= 2) {
            int a = q.front();
            q.pop();
            int b = q.front();
            q.pop();
            
            pr[query(a, b)].push_back({a, b});
        } else {
            break;
        }
    }
    
    int t = pr[0].size() > pr[1].size() ? 0 : 1;
    
    auto ans = pr[t];
    for (auto [a, b, c] : tp) {
        if (t == 0) {
            ans.push_back({a, b});
        } else {
            ans.push_back({b, c});
        }
    }
    assert(ans.size() >= k);
    ans.resize(k);
    std::cout << "!";
    for (auto [a, b] : ans) {
        std::cout << " " << a << " " << b;
    }
    std::cout << std::endl;
}
 
int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
    
    int t;
    std::cin >> t;
    
    while (t--) {
        solve();
    }
    
    return 0;
}

const int di[4] = {-1, 0, 1, 0};
const int dj[4] = {0, -1, 0, 1};
 
int main() {
  ios::sync_with_stdio(false);
  cin.tie(nullptr);
  int tt;
  cin >> tt;
  while (tt--) {
    int h, w;
    cin >> h >> w;
    vector<string> s(h);
    for (int i = 0; i < h; i++) {
      cin >> s[i];
    }
    int sum = 0;
    for (int i = 0; i < h; i++) {
      for (int j = 0; j < w; j++) {
        if (s[i][j] == '#') {
          sum += 1;
          for (int dir = 0; dir < 4; dir++) {
            int ni = i + di[dir];
            int nj = j + dj[dir];
            if (ni >= 0 && nj >= 0 && ni < h && nj < w) {
              if (s[ni][nj] == '#') {
                continue;
              }
            }
            sum += 1;
          }
        }
      }
    }
    vector<int> a = {0, 1, 2, 3, 4};
    vector<string> best;
    int ans = int(1e9);
    auto backup = s;
    for (int rot = 0; rot < 5; rot++) {
      int cur = 0;
      s = backup;
      for (int x : a) {
        for (int i = 0; i < h; i++) {
          for (int j = 0; j < w; j++) {
            if (s[i][j] == '#' && (i + 2 * j) % 5 == x) {
              bool covered = false;
              for (int dir = 0; dir < 4; dir++) {
                int ni = i + di[dir];
                int nj = j + dj[dir];
                if (ni >= 0 && nj >= 0 && ni < h && nj < w) {
                  if (s[ni][nj] == 'S') {
                    covered = true;
                    break;
                  }
                }
              }
              if (!covered) {
                s[i][j] = 'S';
                cur += 1;
              }
            }
          }
        }
      }
      if (cur < ans) {
        ans = cur;
        best = s;
      }
      rotate(a.begin(), a.begin() + 1, a.end());
    }
    assert(ans <= sum / 5);
    for (int i = 0; i < h; i++) {
      cout << best[i] << '\n';
    }
  }
  return 0;
}
